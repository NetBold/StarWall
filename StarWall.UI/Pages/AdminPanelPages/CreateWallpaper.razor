@page "/AdminPanel/CreateWallpaper"
@using StarWall.Domain.WallpaperEntities;
@layout AdminPanelLayout
@inject AccountAPIService AccountAPIService
@inject AdminAPIService AdminAPIService
<PageTitle>StarWall - AdminPanel</PageTitle>
<EditForm Model="createWallpaperDTO" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
<div class="container-fluid px-3 py-2">
        <div class="row bg-dark rounded">
            <h5 style="color: rgb(77, 206, 211);" class="mt-2"><i class="fa far fa-image"></i> Edit Wallpaper</h5>
            <div class="col-md-12 p-2">
                <div class="form-group">
                    <label class="text-white-50">Title</label>
                    <InputText @bind-Value="@createWallpaperDTO.Title" type="text" class="form-control" />
                    <ValidationMessage class="text-danger" For="@(() => createWallpaperDTO.Title)"/>
                </div>
            </div>
            <div class="col-md-6 p-2">
                <div class="form-group">
                    <label class="text-white-50">Genre</label>
                    <InputSelect @bind-Value="@createWallpaperDTO.WallpaperGenreCategoryTitle" class="form-select bg-dark text-white" aria-label="Default select example">
                        <option selected></option>
                        @foreach (var genre in wallpaperGenreCategories)
                        {
                                <option value="@genre.Title">@genre.Title</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="text-danger" For="@(() => createWallpaperDTO.WallpaperGenreCategoryTitle)"/>
                </div>
            </div>
            <div class="col-md-6 p-2">
                <div class="form-group">
                    <label class="text-white-50">Source</label>
                    <InputText @bind-Value="@createWallpaperDTO.Source" type="text" class="form-control" />
                    <ValidationMessage class="text-danger" For="@(() => createWallpaperDTO.Source)"/>
                </div>
            </div>

            <div class="col-md-6 p-2">
                <img @ref="previewDesktopImageElem" class="img-fluid" style="max-height: 500px;" />
                <div class="form-group">
                    <label class="text-white-50">Desktop Image File</label>
                    <InputFile @ref="desktopInputFile" OnChange="@HandleDesktopImageChanged" type="file" class="form-control" accept="image/png, image/jpg, image/jpeg"/>
                </div>
            </div>
            <div class="col-md-6 p-2">
                <img @ref="previewMobileImageElem" class="img-fluid" style="max-height: 500px;" />
                <div class="form-group">
                    <label class="text-white-50">Mobile Image File</label>
                    <InputFile @ref="mobileInputFile" OnChange="@HandleMobileImageChanged" type="file" class="form-control" accept="image/png, image/jpg, image/jpeg"/>
                </div>
            </div>
            <div class="col-md-12 p-2">
                <div class="form-group">
                    <label class="text-white-50">Description</label>
                    <InputTextArea @bind-Value="@createWallpaperDTO.Description" rows="10" class="form-control"/>
                    <ValidationMessage class="text-danger" For="@(() => createWallpaperDTO.Description)"/>
                </div>
            </div>
            <div class="col-md-4 p-2">
                <a class="btn btn-secondary form-control" href="/AdminPanel/ManageWallpapers"><i class="fa fa-arrow-left" aria-hidden="true"></i> Back</a>
            </div> 
            <div class="col-md-4 p-2">
                <a @onclick="HandleResetClick" class="btn btn-info form-control"><i class="fa fa-refresh"></i> Reset</a>
            </div>
            <div class="col-md-4 p-2">
                <button class="btn btn-success form-control"><i class="fa fa-save"></i> Save</button>
            </div>      
        </div>
    </div>
    </EditForm>
@code {
    private CreateWallpaperDTO createWallpaperDTO = new();
    private List<WallpaperGenreCategory> wallpaperGenreCategories = new();

    private InputFile? desktopInputFile;
    private ElementReference previewDesktopImageElem;
    IBrowserFile desktopFile;

    private InputFile? mobileInputFile;
    private ElementReference previewMobileImageElem;
    IBrowserFile mobileFile;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await AuthStateHandler.CheckAuthorizationAdminOrUploader();
        if (firstRender)
        {
            wallpaperGenreCategories = new();
            wallpaperGenreCategories = await AdminAPIService.GetWallpaperGenreCategories();
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if(desktopFile != null)
        {
            var user = await AccountAPIService.GetUserInfoForUserPanel();
            createWallpaperDTO.UploaderId = user.Id;
            await AdminAPIService.CreateWallpaper(createWallpaperDTO, desktopFile, mobileFile);
            HandleResetClick();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", ToastType.error.ToString(), "You have to choose the desktop image");
        }
    }

    private async Task HandleDesktopImageChanged(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        bool isValid = MimeHelper.IsImageFileTypeValid(fileInfo);
        if (isValid)
        {
            desktopFile = e.File;

            await JsRuntime.InvokeVoidAsync("previewImage", desktopInputFile!.Element, previewDesktopImageElem);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", ToastType.error.ToString(), "Invalid file type");
        }
    }

    private async Task HandleMobileImageChanged(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        bool isValid = MimeHelper.IsImageFileTypeValid(fileInfo);
        if (isValid)
        {
            mobileFile = e.File;
            await JsRuntime.InvokeVoidAsync("previewImage", mobileInputFile!.Element, previewMobileImageElem);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("ShowToastr", ToastType.error.ToString(), "Invalid file type");
        }
    }

    private void HandleResetClick()
    {
        createWallpaperDTO = new();
        desktopFile = null;
        mobileFile = null;
    }
}
