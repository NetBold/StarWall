@page "/AdminPanel/ManageContactMessages"
@using X.PagedList;
@inject AdminAPIService AdminAPIService
@layout AdminPanelLayout
<PageTitle>StarWall - AdminPanel</PageTitle>
<div class="container-fluid px-3 py-2">
    <div class="row bg-dark rounded">
        <h5 style="color: rgb(77, 206, 211);" class="mt-2"><i class="fa fa-send"></i> Manage Messages</h5>
        <h6 class="mt-2 text-white">Unread messages</h6>
        <div class="col-md-4 mb-2">
            <InputText @bind-Value="@searchFilterForUnReads" class="form-control" type="text" placeholder="Search" />
        </div>
        <div class="col-md-3 mb-2">
            <button type="submit" class="btn btn-info form-control" @onclick="FilterUnReads"><i class="fa fa-search"></i> Search</button>
        </div>
        <div class="col-md-2 mb-2">
            <button type="submit" class="btn btn-secondary form-control" @onclick="RefreshUnReads"><i class="fa fa-refresh"></i> Refresh</button>
        </div>
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th scope="col">Email</th>
                    <th scope="col">Full Name</th>
                    <th scope="col">Time</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contact in DisplayingUnreadMessages)
                {
                    <tr>
                        <td>@contact.Email</td>
                        <td>@contact.FullName</td>
                        <td>@contact.CreationDate</td>
                        <td>
                                <a class="btn btn-danger" @onclick="() => HandleDeleteButtonClick(contact.Id)"><i class="fa fa-trash"></i></a>
                                <a class="btn btn-secondary" href="/AdminPanel/ViewContactMessage/@contact.Id"><i class="fa fa-eye"></i></a>
                        </td>
                    </tr>
                }                
            </tbody>
        </table>
        <nav dir="ltr" style="margin-top: 10px;" aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                @if (AllUnReadMessages.Any())
                {
                                <li class="page-item">
                                    <a class="page-link" aria-label="Previous" @onclick="HandleUnReadPreviousClick" style="color: aliceblue; cursor:pointer;">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                    @for (int i = 1; i <= pagesCountOfUnReadMessages; i++)
                    {
                        var pageId = i;
                                                        <li class="page-item @(currentPageNumberOfUnReadMessages == pageId ?"active":"")"><a class="page-link" style="color: aliceblue; cursor:pointer;" @onclick="() => HandleUnReadPageButtonClick(pageId)">@pageId</a></li>
                    }      
                                <li class="page-item">
                                            <a class="page-link" aria-label="Next" @onclick="HandleUnReadNextClick" style="color: aliceblue; cursor:pointer;">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                }
            </ul>
        </nav>
        <h6 class="mt-2 text-white">Read Messages</h6>
        <div class="col-md-4 mb-2">
            <input class="form-control" type="text" placeholder="Search" @bind-value:event="oninput" @bind-value="@searchFilterForReads" />
        </div>
        <div class="col-md-3 mb-2">
            <button type="submit" class="btn btn-info form-control" @onclick="FilterReads"><i class="fa fa-search"></i> Search</button>
        </div>
        <div class="col-md-2 mb-2">
            <button type="submit" class="btn btn-secondary form-control" @onclick="RefreshReads"><i class="fa fa-refresh"></i> Refresh</button>
        </div>
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th scope="col">Email</th>
                    <th scope="col">Full Name</th>
                    <th scope="col">Time</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contact in DisplayingReadMessages)
                {
                    <tr>
                        <td>@contact.Email</td>
                        <td>@contact.FullName</td>
                        <td>@contact.CreationDate</td>
                        <td>
                                <a class="btn btn-danger" @onclick="() => HandleDeleteButtonClick(contact.Id)"><i class="fa fa-trash"></i></a>
                                <a class="btn btn-secondary" href="/AdminPanel/ViewContactMessage/@contact.Id"><i class="fa fa-eye"></i></a>
                        </td>
                    </tr>
                }                
            </tbody>
        </table>

        <nav dir="ltr" style="margin-top: 10px;" aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                @if (AllReadMessages.Any())
                {
                    <li class="page-item">
                        <a class="page-link" aria-label="Previous" @onclick="HandleReadPreviousClick" style="color: aliceblue; cursor:pointer;">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    @for (int i = 1; i <= pagesCountOfReadMessages; i++)
                    {
                        var pageId = i;
                                <li class="page-item @(currentPageNumberOfReadMessages == pageId ?"active":"")"><a class="page-link" style="color: aliceblue; cursor:pointer;" @onclick="() => HandleReadPageButtonClick(pageId)">@pageId</a></li>
                    }      
                    <li class="page-item">
                                <a class="page-link" aria-label="Next" @onclick="HandleReadNextClick" style="color: aliceblue; cursor:pointer;">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<StarWall.UI.Components.DeleteConfirmation IsParentProcessing="isProcessing" ConfirmationChanged="ConfirmDelete_Click"></StarWall.UI.Components.DeleteConfirmation>

@code {
    private List<ContactDTO> AllUnReadMessages = new();
    private List<ContactDTO> DisplayingUnreadMessages = new();
    public int pagesCountOfUnReadMessages { get; set; } = 0;
    private int currentPageNumberOfUnReadMessages = 1;
    private string searchFilterForUnReads = "";


    private List<ContactDTO> DisplayingReadMessages = new();
    private List<ContactDTO> AllReadMessages = new();
    public int pagesCountOfReadMessages { get; set; } = 0;
    private int currentPageNumberOfReadMessages = 1;
    private string searchFilterForReads = "";

    private bool isProcessing = false;

    private int defaultPageSize = 15;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await AuthStateHandler.CheckAuthorizationAdmin();
        if (firstRender)
        {
            AllUnReadMessages = await AdminAPIService.GetUnReadMessages();
            AllReadMessages = await AdminAPIService.GetReadMessages();
            await SetDisplayingUnReadMessagesList();
            await SetDisplayingReadMessagesList();
            StateHasChanged();
        }
    }

    private async Task HandleUnReadPageButtonClick(int pageNumber)
    {
        currentPageNumberOfUnReadMessages = pageNumber;
        await SetDisplayingUnReadMessagesList();
    }

    private async Task HandleReadPageButtonClick(int pageNumber)
    {
        currentPageNumberOfReadMessages = pageNumber;
        await SetDisplayingReadMessagesList();
    }

    private async Task HandleUnReadPreviousClick()
    {
        if (currentPageNumberOfUnReadMessages > 1)
            currentPageNumberOfUnReadMessages--;
        else
            currentPageNumberOfUnReadMessages = pagesCountOfUnReadMessages;
        await SetDisplayingUnReadMessagesList();
    }

    private async Task HandleUnReadNextClick()
    {
        if (currentPageNumberOfUnReadMessages < pagesCountOfUnReadMessages)
            currentPageNumberOfUnReadMessages++;
        else
            currentPageNumberOfUnReadMessages = 1;
        await SetDisplayingUnReadMessagesList();
    }

    private async Task HandleReadPreviousClick()
    {
        if (currentPageNumberOfReadMessages > 1)
            currentPageNumberOfReadMessages--;
        else
            currentPageNumberOfReadMessages = pagesCountOfReadMessages;
        await SetDisplayingReadMessagesList();
    }

    private async Task HandleReadNextClick()
    {
        if (currentPageNumberOfReadMessages < pagesCountOfReadMessages)
            currentPageNumberOfReadMessages++;
        else
            currentPageNumberOfReadMessages = 1;
        await SetDisplayingReadMessagesList();
    }

    private async Task SetDisplayingUnReadMessagesList()
    {
        DisplayingUnreadMessages = await AllUnReadMessages.ToPagedList(currentPageNumberOfUnReadMessages, defaultPageSize).ToListAsync();
        pagesCountOfUnReadMessages = AllUnReadMessages.Count / defaultPageSize;
        if (AllUnReadMessages.Count % defaultPageSize == 0)
        {

        }
        else
        {
            pagesCountOfUnReadMessages++;
        }
    }

    private async Task SetDisplayingReadMessagesList()
    {
        DisplayingReadMessages = await AllReadMessages.ToPagedList(currentPageNumberOfReadMessages, defaultPageSize).ToListAsync();
        pagesCountOfReadMessages = AllReadMessages.Count / defaultPageSize;
        if (AllReadMessages.Count % defaultPageSize == 0)
        {

        }
        else
        {
            pagesCountOfReadMessages++;
        }

    }

    private long deletingUnReadMessageId = 0;
    private async Task HandleDeleteButtonClick(long messageId)
    {
        deletingUnReadMessageId = messageId;
        await JsRuntime.InvokeVoidAsync("showConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;
        if (isConfirmed && deletingUnReadMessageId > 0)
        {
            await AdminAPIService.DeleteContact(deletingUnReadMessageId);
            AllUnReadMessages = await AdminAPIService.GetUnReadMessages();
            AllReadMessages = await AdminAPIService.GetReadMessages();
            await SetDisplayingUnReadMessagesList();
            await SetDisplayingReadMessagesList();
            await JsRuntime.InvokeVoidAsync("hideConfirmationModal");
        }
        isProcessing = false;
    }

    private async Task FilterUnReads()
    {
        AllUnReadMessages = await AdminAPIService.GetUnReadMessages();
        AllUnReadMessages = AllUnReadMessages.Where(x => x.Email.ToLower().Contains(searchFilterForUnReads.ToLower()) || x.FullName.Contains(searchFilterForUnReads.ToLower())).ToList();
        await SetDisplayingUnReadMessagesList();
    }

    private async Task FilterReads()
    {
        AllReadMessages = await AdminAPIService.GetReadMessages();
        AllReadMessages = AllReadMessages.Where(x => x.Email.ToLower().Contains(searchFilterForReads.ToLower()) || x.FullName.ToLower().Contains(searchFilterForReads.ToLower())).ToList();
        await SetDisplayingReadMessagesList();
    }

    private async Task RefreshUnReads()
    {
        searchFilterForUnReads = "";
        AllUnReadMessages = await AdminAPIService.GetUnReadMessages();
        await SetDisplayingUnReadMessagesList();
        await JsRuntime.InvokeVoidAsync("ShowToastr", ToastType.success.ToString());
    }

    private async Task RefreshReads()
    {
        searchFilterForReads = "";
        AllReadMessages = await AdminAPIService.GetReadMessages();
        await SetDisplayingReadMessagesList();
        await JsRuntime.InvokeVoidAsync("ShowToastr", ToastType.success.ToString());
    }
}
